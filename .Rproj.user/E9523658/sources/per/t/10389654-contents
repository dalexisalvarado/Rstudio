#Proceso ETL consiste en la Extracción, Trasnformacion y Limpieza de datos para trabajarlo

############################################
###BORRAR DATOS CARGADOS EN MEMORIA Y DIRECTORIO DE TRABAJO-----

rm(list=ls()) # Borrar los datos de entorno cargados en memoria 

setwd("C:/Users/a/Desktop/DataScience/Ejercicios R-Studio/1. Comandos básicos - ETL") #especificar el directorio de trabajo
#ojo, se debe emplear los slash hacia la derecha / y no los hacia la izquierda \ (que traes al copiar desde el explorador de windows)
# Tambien se puede especificar mediante Session>Set working directory>Choose directory

#Obtener directorio de trabajo actual
getwd()


###########################################
###INSTALACION DE LIBRER??A Y ACTIVACION ----

#Los paquetes son colecciones de funciones R, datos y código compilado en un formato bien definido. El directorio donde se almacenan los paquetes se llama biblioteca.

#instalacion de un paquete:
#install.packages("nombre_librer??a") #la instalacion se debe realizar una ??nica vez

#Eliminaci??n de un paquete:
#detach("package:fun", unload=TRUE)

#activacion de librer??a:
library(tidyverse) #activaci??n de la librer??a tidyverse para la sesion actual. Debe estar previamente instalada

#Ruta de las librer??as
.libPaths() # Localizando la ruta de las librer??as

#Librer??as instaladas
library()
###
search()#librerias cargadas en memoria, usables en esta sesion de trabajo
###########################################
###CREACION DE OBJETOS
#
#1. VECTORES - Conjunto de objetos de id??ntica clase ----

vector_1<-c(1,22,55) #creacion de un vector con los valores 1, 22 y 55
vector_2<-c("Perro","Gato","Elefante")
vector_3<-c(seq(1,19))#comando seq, crea una secuencia entre 1 y 19
vector_4<-c(seq(from=100, to=19, by=-10))#desde 100 a 19, restando 10 
vector_5<-rep("Casa",time=5) #vector con 5 elementos "Casa"

vector_2[1] #"Perro" - busca el primer elemento del vector 2

#se pueden operar matematicamente los vectores si tienen la misma dimension y son del mismo tipo

length(vector_1) #cantidad de elementos - Resultado 3
class(vector_1) #clase de sus elementos - Resultado numeric

vector_6<-c(66,6,4.2)

vector_7<-vector_1*vector_6
vector_7 #resultado  66 132 231 - multiplicacion elemento por elemento

#2 DATA FRAMES - Grupo de vectores ordenados de forma tabular (tablas)----
#Data frame tiene observaciones (filas) x variables (columnas), de distintos tipos
#Creacion de un DF a partir de vectores

id<-1:4 #crea un vector desde 1 a 4 (incluyendo ambos extremos) tipo int
edad<-c(22,20,88,11)
sexo<-c("f","m","m","m")
ocupacion<-c("estudiante","empleado","jubiliado","estudiante")

#creacion del DF
datos_encuesta<-data.frame(id,edad,sexo,ocupacion)
print(datos_encuesta)

#salida:
#   id edad sexo  ocupacion
# 1  1   22    f estudiante
# 2  2   20    m   empleado
# 3  3   88    m  jubiliado
# 4  4   11    m estudiante

class(datos_encuesta) #Resultado Data.frame

#Union de DF
#creamos un segundo DF

id<-5:8
edad<-c(30,28,99,1)
sexo<-c("m","f","f","m")
ocupacion<-c("estudiante","empleado","jubiliado","sin actividad")

datos_nuevos<-data.frame(id,edad,sexo,ocupacion)

#comando para unir data frames  es rbind (DF_1,DF_2)

datos_todos<-rbind(datos_encuesta,datos_nuevos)

#comando para borrar DF es remove(DF)

#comandos para obtener algunas caracteristicas de los datos
str(datos_encuesta) #indica el tipo de objeto de cada variable
str(datos_encuesta$sexo) #Respuesta - tipo caracter

#si queremos transformar en una variable cualitativa o factor, para hacer an??lisis posteriores

datos_encuesta$sexo<-as.factor(datos_encuesta$sexo)
str(datos_encuesta$sexo) #Respuesta - tipo factor

#primeros datos de un DF
head(datos_todos)

#3 MATRICES - vector bidimensional, con filas y columnas ordenadas del mismo tipo ----

#Creacion de una matriz
matriz<-matrix(nrow=3,ncol=4) #resultado - crea una matriz vac??a (NA) de 3x4
matriz<-matrix(1:5,nrow=3,ncol=4) #resultado - crea una matriz de 3x4 y la completa con los valores de 1 a 5 en orden, de arriba a abajo y de izquierda a derecha

#creacion de matriz a partir de vectores:
vector_1 <- 1:4
vector_2 <- 5:8
vector_3 <- 9:12
vector_4 <- 13:16

matriz <- rbind(vector_1, vector_2, vector_3, vector_4) #rbind inplica que cada vector ser?? una row
#Resultado
matriz
          # [,1] [,2] [,3] [,4]
# vector_1    1    2    3    4
# vector_2    5    6    7    8
# vector_3    9   10   11   12
# vector_4   13   14   15   16

matriz <- cbind(vector_1, vector_2, vector_3, vector_4) #cada vector ser?? una columna
matriz
      # vector_1 vector_2 vector_3 vector_4
# [1,]        1        5        9       13
# [2,]        2        6       10       14
# [3,]        3        7       11       15
# [4,]        4        8       12       16

#las operaciones de suma, division, potencia, se hacen elemento a elemento

matriz<-matriz^0.5 #sacamos raiz cuadrada elemento a elemento
matriz
      # vector_1 vector_2 vector_3 vector_4
# [1,] 1.000000 2.236068 3.000000 3.605551
# [2,] 1.414214 2.449490 3.162278 3.741657
# [3,] 1.732051 2.645751 3.316625 3.872983
# [4,] 2.000000 2.828427 3.464102 4.000000

###########################################
###OBTENCION Y GRABACI??N DE DATOS ----
#1. Leer CSV ----
library(tidyverse) # activo el paquete
#mis_datos <-read.table("mydata.csv", header = TRUE, sep = ",", dec=",")
pozos_perforados<-read.csv("pozos-en-perforacin-por-provincia.csv")

#http://datos.energia.gob.ar/dataset/7ea2ac77-d7a0-4129-9fbf-6f1a25d94e21/archivo/dfc143e7-6dbb-4cb0-90a1-a710e77e6072

#2. Leer EXCEL----
library(readxl)
#mi_excel<-read_excel("mydata.xlsx")



#Exploracion de un DF

str(pozos_perforados) #tipos de datos de las variables
ncol(pozos_perforados)#cantidad de variables - Resultado 6
nrow(pozos_perforados)#cantidad de observaciones - Resultado 6944
names(pozos_perforados)#nombres de las variables

head(pozos_perforados)#primeros datos

#Respuesta:
  # anio mes indice_tiempo concepto_metros       provincia pozos_en_perforacion
# 1 2009   1       2009-01        Avanzada          Chubut                    0
# 2 2009   1       2009-01        Avanzada Estado Nacional                    0
# 3 2009   1       2009-01        Avanzada        La Pampa                    0
# 4 2009   1       2009-01        Avanzada         Mendoza                    1
# 5 2009   1       2009-01        Avanzada         Neuqu??n                    0
# 6 2009   1       2009-01        Avanzada       Rio Negro                    0

#Transformar la provincia en una variable tipo factor

#pozos_perforados$provincia<-as.factor(pozos_perforados$provincia)

#3. CAMBIO DE NOMBRE A UNA VARIABLE (columna) ----
names(pozos_perforados)[1] #Respuesta "anio"

#names(pozos_perforados)[1]<-"A??o" #se coloca el nuevo nombre

#4. ELIMINAR UNA VARIABLE (COLUMNA) ----
#pozos_perforados[,3]<-NULL #para pozos perforados, para todas las filas, columna 3 (indice_tiempo) agregamos un NULL
#head(pozos_perforados)

    # A??o mes concepto_metros       provincia pozos_en_perforacion
# 1 2009   1        Avanzada          Chubut                    0
# 2 2009   1        Avanzada Estado Nacional                    0
# 3 2009   1        Avanzada        La Pampa                    0
# 4 2009   1        Avanzada         Mendoza                    1
# 5 2009   1        Avanzada         Neuqu??n                    0
# 6 2009   1        Avanzada       Rio Negro                    0

#5. REORDENAR LAS VARIABLES (COLUMNAS) ----
pozos_perforados<-pozos_perforados[,c(3,2,1,4,5,6)]
head(pozos_perforados)

#Resultado
      # indice_tiempo mes anio concepto_metros       provincia pozos_en_perforacion
# 1       2009-01   1 2009        Avanzada          Chubut                    0
# 2       2009-01   1 2009        Avanzada Estado Nacional                    0
# 3       2009-01   1 2009        Avanzada        La Pampa                    0
# 4       2009-01   1 2009        Avanzada         Mendoza                    1
# 5       2009-01   1 2009        Avanzada         Neuqu??n                    0
# 6       2009-01   1 2009        Avanzada       Rio Negro                    0

#6. DATOS AUSENTES  ------
sum(is.na(pozos_perforados))                # cuantos NA tiene mi DF?- respuesta 0 
colSums(is.na(pozos_perforados))               # cantidad de NA por columnas - respuesta 0
#which(is.na(mi_csv$TALLA == T))            # Donde se encuentran los NA?
#7. GUARDAR ARCHIVO ----
#Salida TXT con datos separados por comas
write.table(pozos_perforados,"salida_pozos_perforados.txt",sep=",",row.names = F)

#Salida EXCEL

library(openxlsx)  #Simplifies the creation of Excel .xlsx files by providing a high level interface to writing, styling and editing worksheets. Through the use of 'Rcpp', read/write times are comparable to the 'xlsx' and 'XLConnect' packages with the added benefit of removing the dependency on Java.
write.xlsx(pozos_perforados,"salida_pozos_perforados.xlsx",sheetName="Probando nombre de hoja")

# Graficos b??sicos ----
#DIBUJAR UNA LINEA
library(ggplot2)
pozos_perforados$pozos_en_perforacion<-as.integer(pozos_perforados$pozos_en_perforacion)

ggplot(data=pozos_perforados)+
  geom_smooth(mapping=aes(x=anio,y=pozos_en_perforacion))

#SEPARADOS POR PROVINCIA
#al parecer hay nulos

ggplot(data=pozos_perforados)+
  geom_smooth(mapping=aes(x=anio,y=pozos_en_perforacion, color=provincia))+facet_wrap(~provincia,ncol=4,nrow=4)




#CONVERSION DE TIPOS DE DATOS -----
# as.numeric	Convierte a tipo numerico
# as.integer	Convierte a tipo entero
# as.character	Convierte a tipo caracter
# as.logical	Convierte a tipo logico o booleano
# as.factor	Convierte a tipo factor
# as.ordered	Convierte a tipo factor ordenado


###########################################
###PAQUETE DPLYR####-----------------------
#Facilita el manejo de ficheros en R. 

# Las funciones del paquete responden a las siguientes acciones (verbos):

# seleccionar--> select(): devuelve un conjunto de columnas (variables)
# renombrar--> rename(): renombra variables en una conjunto de datos
# filtrar -->filter(): devuelve un conjunto de filas  seg??n una o varias condiciones l??gicas
# ordenar filas  --> arrange(): reordena filas de un conjunto de datos
# agregar variables/columnas --> mutate(): a??ade nuevas variables/columnas o transforma variables existentes
# resumir--> summarise() / summarize(): genera res??menes estadisticos de diferentes variables en el conjunto de datos.
# agrupar--> group_by(): agrupa un conjunto de filas seleccionado, en un conjunto de filas de resumen de acuerdo con los valores de una o m????s columnas o expresiones.

# Lo que hace que la sintaxis sea especialmente clara es la correspondencia tan n??tida entre el comando y la acci??n. Para llevar a cabo estas acciones debemos tener en cuenta algunas caracter??sticas comunes:
#   
# *El primer argumento siempre es un data.frame
# *El resto de argumentos indican lo que queremos hacer con el data.frame.
# *El resultado siempre tiene tambi??n la estructura de data.frame

#Filtrar por provincia - Crear un DF nuevo
pozos_perforados_santa_cruz<-filter(pozos_perforados,provincia=="Santa Cruz")

#Seleccionar columnas espec??ficas - Crear un DF nuevo
pozos_perforados_santa_cruz_2<-select(pozos_perforados_santa_cruz,mes,anio,pozos_en_perforacion)

#Gr??fica de pozos en perforacion para santa cruz
ggplot(data=pozos_perforados_santa_cruz)+
  geom_smooth(mapping=aes(x=anio,y=pozos_en_perforacion))

#La funci??n group_by() es extremadamente ??til trabajando en conjunci??n con la funci??n summarise():

#por ejemplo, quiero sumar la cantidad de pozos en exploracion por provincia para 2022

pozos_perforados %>%
  group_by(provincia)%>%
  filter(anio==2022) %>%
  summarise(sum(pozos_en_perforacion)) 

#por ejemplo, quiero sumar la cantidad de pozos en exploracion por a??o
pozos_perforados %>%
  group_by(anio) %>%
  summarise(sum(pozos_en_perforacion))

#??y si quiero sumar la cantidad de pozos en exploracion por a??o y por provincia?

#funcion filter() permite hacer un subconjunto de observaciones basado en los valroes de interes

head(pozos_perforados)
pozos_perforados_patagonicos<-filter(pozos_perforados,(provincia=="Santa Cruz"|provincia=="Chubut"|provincia=="Neuqu??n"|provincia=="Rio Negro"|provincia=="Tierra del fuego"))

sum(pozos_perforados_patagonicos)

rowSums(pozos_perforados_patagonicos[,c(6)],na.rm=TRUE)

?filter

###########################################
###FORCAST - Gestion de factores ----
#Permite trabajar con factores

#as.factor --> convierte 

fct_count(pozos_perforados$provincia) # Count entries in a factor (n?? de observaciones)
#Responde:
# f                    n
# <fct>            <int>
#   1 Chubut             696
# 2 C??rdoba             60
# 3 Estado Nacional    688
# 4 Formosa            124
# 5 Jujuy              352
# 6 La Pampa           512
# 7 La Rioja            64
# 8 Mendoza            696
# 9 Neuqu??n            696
# 10 Rio Negro          696
# 11 Salta              656
# 12 San Juan           312
# 13 Santa Cruz         696
# 14 Tierra del Fuego   696


###########################################
### Trabajar con FECHAS ----
#Comandos del PQ b??sico
#introducir una fecha:
mi_cumple<-as.Date("1992/10/26") #a??o, mes, d??a

class(mi_cumple) #Date

#se puede indicar c??mo se est??n ingresando los valores, para que los tome correctamente

dia1 <- as.Date("25/12/2017", format = "%d/%m/%Y")
dia1 #Date 2017/12/25

today() #dia de hoy

difftime(today(),mi_cumple) #Time difference of 11248 days

?difftime()

difftime(today(),mi_cumple,unit="weeks") #Time difference of 1606.857 weeks
difftime(today(),mi_cumple,unit="hours") #Time difference of 269952 hours

Sys.time() #Hora del sistema - [1] "2023-08-13 19:45:02 -03"

########################################
###LUBRIDATE-----
library(lubridate)
now() #"2023-08-13 19:51:33 -03"

now()-Sys.time() #Time difference of -0.0001008511 secs


###########################################
###OPERADORES RELACIONALES----

##########################################
#### GENERACION DE TABLAS DE SALIDA -PAQUETE stargazer

install.packages("stargazer")
library(stargazer)
?stargazer

stargazer(encuesta_resumida,type="text",out="texto_salida.txt")
stargazer(encuesta)

#type: "latex", "html" para c??digo html, text por ASCII
#title: nombre de la tabla
#out: nombre del archivo de salida, puede ser con extensi??n .txt, .htm o .html
#font.size: "tiny", "scriptsize", "footnotesize", "small",
#"normalsize", "large", "Large", "LARGE", "huge", "Huge". If NULL (default), no particular font is imposed.

##########################################
####FUNCIONES DE ESTAD??STICA B??SICA ----

##### funciones estadisticas basica 

# summary(): se utiliza para obtener res??menes de datos a trav??s de 
# estad??sticos descriptivos y res??menes estad??sticos de los resultados, 
# coeficientes.

# sum(): devolver?? la suma de todos los valores.

# max(): Devuelve el valor m??ximo de los datos.

# min(): Devuelve el valor m??nimo de los datos .

# mean(): Devuelve el valor medio de los datos - Media aritm??tica o promedio

# median(): Devuelve el valor mediano de los datos

# sd(): Calcula la desviaci??n t??pica de los datos

#lengh() conteo de casos. 

##Para todas se puede incluir como argumento que omita valores nulos na.rm=TRUE --> remove the na values from data
##################################################

#Ordenar datos de forma creciente

#sort(DF$columna)
#sort(DF$columna, decreasing=TRUE) #de forma decreciente

#DIVIDIR DF ----
#nuevo_DF<-DF(DF$columna=="criterio & DF$columna2>criterio2)


